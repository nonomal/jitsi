def wixHome = System.env.WIX != null
        ? System.env.WIX
        : 'C:\\Program Files (x86)\\WiX Toolset v3.11\\'
def wixRootDir = "${buildDir}/install/wix"
def wixTempDir = "${wixRootDir}/tmp"
def wixTargetDir = "${wixRootDir}/target"
def arch
switch (project.property('application.target')) {
    case ["x86", "i386"]:
        arch = 'x86'
        break
    case ["x64", "x86-64", "x86_64", "amd64"]:
        arch = 'x64'
        break
    case ["arm64", "aarch64"]:
        arch = 'arm64'
        break
    default:
        arch = project.property('application.target')
        break
}

task copyLauncher(type: Copy, group: 'installer-wix') {
    from nativeSrcDir
    into wixTargetDir
    include '**/cmake-build-*/windows/run/**/*.exe'
    includeEmptyDirs = false
    eachFile {
        path = name
    }
}

task copyCleansweep(type: Copy, group: 'installer-wix') {
    from nativeSrcDir
    into wixTempDir
    include '**/cmake-build-*/windows/cleansweep/**/*.exe'
    includeEmptyDirs = false
    eachFile {
        path = name
    }
}

task prepareWixTarget(type: Sync, group: 'installer-wix', dependsOn: [
        installWindowsDist,
        copyLauncher,
        copyCleansweep
]) {
    from installWindowsDist.outputs.files
    into wixTargetDir
    exclude "${rootProject.name}"
    caseSensitive = false
    preserve {
        include "${project.property('application.name')}.exe"
    }
}

def signFile(File fileToSign) {
    jsign(
            file: fileToSign.absolutePath,
            name: project.property('application.name'),
            url: project.property('application.web'),
            keystore: file(project.property('application.win.certfile')).absolutePath,
            alias: project.property('application.win.certalias'),
            storepass: project.property('application.win.certpass'),
            tsaurl: 'http://time.certum.pl',
            alg: 'SHA-256',
            replace: 'true'
    )
}

task signWixTarget(group: 'installer-wix', dependsOn: prepareWixTarget) {
    inputs.files(fileTree("${wixTargetDir}/native") {
        include '*.dll'
    })
    inputs.files(fileTree(wixTargetDir) {
        include '*.exe'
    })
    doLast {
        if (project.hasProperty('application.win.certfile')) {
            inputs.files.each { signFile it }
        }
    }
}

task wixHeat(type: Exec, group: 'installer-wix', dependsOn: signWixTarget) {
    inputs.files(wixTargetDir)
    outputs.files("${wixTempDir}/heat.wxs")

    workingDir wixTargetDir
    commandLine "\"${wixHome}bin\\heat.exe\""
    args 'dir', '.',
            '-cg', 'ComponentGroup_HeatExe',
            '-dr', 'INSTALLDIR',
            '-out', outputs.files.singleFile,
            '-platform', arch,
            '-nologo', '-ag', '-srd', '-sfrag', '-scom', '-sreg', '-svb6',
            '-var', 'var.SourceDir'
}

static def findConfigInHeat(File heat) {
    def xml = new XmlSlurper(false, true).parse(heat)
    xml.Fragment.DirectoryRef.Directory.find { it.'@Name' == 'config' }.'@Id'.toString()
}

task copyWixResources(type: Copy, group: 'installer-wix', dependsOn: wixHeat) {
    from("${projectDir}/windows") {
        include "wix/*.jpg"
        include "wix/*.wx*"
        include "wix/License.rtf"
        include "sc-logo.ico"
    }
    into wixTempDir
    includeEmptyDirs = false
    eachFile {
        path = name
    }
}

task wixCandle(type: Exec, group: 'installer-wix', dependsOn: [
        copyCleansweep,
        copyWixResources
]) {
    inputs.files(copyCleansweep.outputs)
    inputs.files(copyWixResources.outputs)
    workingDir wixTempDir
    commandLine "\"${wixHome}bin\\candle.exe\""
    doFirst {
        args '-nologo',
                '-dcodepage=1252',
                '-ext', 'WixUIExtension',
                '-ext', 'WixUtilExtension',
                '-arch', arch,
                "-dPlatform=${arch}",
                "-dSourceDir=../target",
                "-dMANUFACTURER=${project.property('application.org')}",
                "-dPRODUCT=${project.property('application.name')}",
                "-dUPGRADE_CODE=${project.property('application.wix_upgrade_code')}",
                "-dAPP_WEB=${project.property('application.web')}",
                "-dVERSION=${versionShort}",
                "-dLAUNCHER_NAME=${project.name}",
                "-dCOMPRESS_LEVEL=none",
                "-dConfigDirId=${findConfigInHeat(wixHeat.outputs.files.singleFile)}",
                '*.wxs'
    }
}

task wixLight(type: Exec, group: 'installer-wix', dependsOn: wixCandle) {
    workingDir wixTempDir
    commandLine "\"${wixHome}bin\\light.exe\""
    args '-nologo',
            '-ext', 'WixUIExtension',
            '-ext', 'WixUtilExtension',
            '-cultures:en-us',
            '-loc', "${projectDir}/windows/wix/en-us.wxl",
            '-out', "${wixRootDir}/jitsi-${versionShort}-win-${arch}.msi",
            "${wixTempDir}/*.wixobj"
}

task signMsi(group: 'installer-wix', dependsOn: wixLight) {
    inputs.files("${wixRootDir}/jitsi-${versionShort}-win-${arch}.msi")
    doLast {
        if (project.hasProperty('application.win.certfile')) {
            signFile inputs.files.singleFile
        }
    }
}

task windowsZip(type: Zip, group: 'installer-wix', dependsOn: signWixTarget) {
    archivesBaseName = "jitsi"
    archiveVersion = versionShort
    archiveClassifier = "win-${arch}"
    from wixTargetDir
}
